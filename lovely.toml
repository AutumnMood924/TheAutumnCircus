[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then"
position = "at"
payload = "if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo or self.config.center.shader then"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local mod_percent = false"
position = "before"
payload = '''if next(poker_hands["Flush"]) then
	local thac_flushfunc
	local thac_suitcounts = {}
	for i=1,#scoring_hand do
		if (not scoring_hand[i].debuff) and scoring_hand[i].ability.effect ~= "Wild Card" and next(TheAutumnCircus.func.get_card_suits(scoring_hand[i], false)) then
			thac_suitcounts[scoring_hand[i].base.suit] = (thac_suitcounts[scoring_hand[i].base.suit] or 0) + 1
		end
	end
	local highest_suit = {"Hearts", 0}
	for _, suit in ipairs(SMODS.Suit.obj_buffer) do
		if thac_suitcounts[suit] then
			if thac_suitcounts[suit] > highest_suit[2] then
				highest_suit = {suit, thac_suitcounts[suit]}
				--print("New highest suit! "..highest_suit[1])
			end
		end
	end
	thac_flushfunc = SMODS.Suits[highest_suit[1]].flush_function
	if thac_flushfunc then
		local effect = thac_flushfunc(scoring_hand)
		G.E_MANAGER:add_event(Event({
			trigger = 'before',
			delay = 2.9,
            func = (function()
                local text = effect.message
                play_sound('gong', 0.94, 0.3)
                play_sound('gong', 0.94*1.5, 0.2)
                play_sound('tarot1', 1.5)
				if text then
					attention_text({
						scale = 1.4, text = text, hold = 1.7, align = 'cm', offset = {x = 0,y = -2.7},major = G.play
					})
				end
				if effect.func then effect.func(scoring_hand) end
				for i=1,#scoring_hand do
					scoring_hand[i]:juice_up()
					delay(0.1)
				end
                return true
            end)
        }))
	end
end'''
match_indent = true
overwrite = false

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
position = "at"
payload = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or blind.name == 'Jera' and k==1 and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
match_indent = true
overwrite = false

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''function create_card(_type, area, legendary, _rarity, skip_materialize, soulable, forced_key, key_append)'''
position = "after"
payload = '''if G.GAME.modifiers.consumables_all_oddities and (_type == "Tarot_Planet" or SMODS.ConsumableTypes[_type] ~= nil) then
_type = "Oddity"
forced_key = nil
end'''
match_indent = true
overwrite = false

# Minor Arcana tooltips
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _c.set == 'Other' then'''
position = "before"
payload = '''
if card and card.base and card.base.suit then
	if card.base.suit == "thac_Cups" then
		info_queue[#info_queue+1] = {key = 'thac_cups_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Wands" then
		info_queue[#info_queue+1] = {key = 'thac_wands_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Coins" then
		info_queue[#info_queue+1] = {key = 'thac_coins_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Swords" then
		info_queue[#info_queue+1] = {key = 'thac_swords_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Pickaxes" then
		info_queue[#info_queue+1] = {key = 'thac_pickaxes_tooltip', set = 'Other'}
	end
end
'''
match_indent = true
overwrite = false


# create_UIBox_your_collection()
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "UIBox_button({button = 'your_collection_seals', label = {localize('b_seals')}, minw = 5, id = 'your_collection_seals'}),"
position = "after"
payload = '''UIBox_button({button = 'your_collection_stamps', label = {localize('b_stamps')}, minw = 5, id = 'your_collection_stamps'}),'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "UIBox_button({button = 'your_collection_seals', label = {localize('b_seals')}, minw = 5, id = 'your_collection_seals'}),"
position = "after"
payload = '''UIBox_button({button = 'your_collection_stamps', label = {localize('b_stamps')}, minw = 5, id = 'your_collection_stamps'}),'''
match_indent = true

# generate_card_ui()
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "(?<indent>[\t ]*)if v == 'eternal'"
line_prepend = '$indent'
position = 'before'
payload = '''if SMODS.Stamp.reverse_lookup[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
payload = '''
for k, v in pairs(SMODS.Stamps) do
	G.BADGE_COL[k:lower()..'_stamp'] = v.colour
end
'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
position = "after"
payload = '''if self.seal and SMODS.Stamp.reverse_lookup[self.seal..'_stamp'] then badges[#badges] = string.lower(self.seal)..'_stamp' end'''
match_indent = true


# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "after"
payload = '''
	local prev_seal_stamp = self:get_seal()
	local seal_stamp_obj
	if prev_seal_stamp and prev_seal_stamp ~= _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
	end
	seal_stamp_obj = nil
'''
match_indent = true

# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Gold Card' and self.seal == 'Gold' and self.playing_card then"
position = "before"
payload = '''
	local seal_stamp_obj
	if _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
	end
'''
match_indent = true

# Card:add_to_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
	if (not self.added_to_deck) and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == 'function' then
				seal_stamp_obj.deck_add(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == "function" then
				seal_stamp_obj.deck_add(self)
			end
		end
	end
'''
match_indent = true

# Card:remove_from_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:remove_from_deck(from_debuff)"
position = "after"
payload = '''
	if self.added_to_deck and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == 'function' then
				seal_stamp_obj.deck_remove(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == "function" then
				seal_stamp_obj.deck_remove(self)
			end
		end
	end
'''
match_indent = true

# Card:set_cost()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "before"
payload = '''
if self.ability.set == "Joker" and self.cost > 0 and self.seal and not G.GAME.used_vouchers.v_thac_stamp_coupon then
    self.extra_cost = self.extra_cost + 2
end
'''
match_indent = true

# Game:init_game_object()
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "last_tarot_planet = nil,"
position = "before"
payload = '''
thac_data = {
	suit_levels = {
	},
},
'''
match_indent = true


# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''
thac_suit_bonus = G.GAME.thac_data.suit_levels[self.base.suit],
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
if specific_vars.thac_suit_bonus and specific_vars.thac_suit_bonus.level > 1 then
	localize{type = 'other', key = 'card_thac_suit_bonus', nodes = desc_nodes, vars = {specific_vars.thac_suit_bonus.level, specific_vars.thac_suit_bonus.chips, specific_vars.thac_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.thac_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.thac_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
if card and card.ability.effect ~= 'Stone Card' and (not card.config.center.no_suit) and (specific_vars and specific_vars.thac_suit_bonus and specific_vars.thac_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_thac_suit_bonus', nodes = desc_nodes, vars = {specific_vars.thac_suit_bonus.level, specific_vars.thac_suit_bonus.chips, specific_vars.thac_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.thac_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.thac_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# G.UIDEF.run_info
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "tab_definition_function = create_UIBox_current_hands,"
position = "after"
payload = '''
},{
	label = localize('b_suits'),
	tab_definition_function = create_UIBox_current_suits,

'''
match_indent = true
overwrite = false

# Ceaseless Wheel functionality on Wheel of Fortune used_vouchers

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local temp_pool =   (self.ability.name == 'The Wheel of Fortune' and self.eligible_strength_jokers) or"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel then
		local probability = G.GAME.probabilities.normal
		if self.edition and self.edition.negative then
			probability = 1
		end
		local odds = pseudorandom(pseudoseed('ceaseless_wheel_unceasing'))
		if odds < probability/4 then
			local negative = false
			odds = pseudorandom(pseudoseed('ceaseless_wheel'))
			if odds < probability/4 then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval, post = eval_card(self, {selling_self = true})"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel and self.config.center.key == "c_wheel_of_fortune" then
		local probability = G.GAME.probabilities.normal
		if self.edition and self.edition.negative then
			probability = 1
		end
		local odds = pseudorandom(pseudoseed('ceaseless_wheel_unceasing'))
		if odds < probability/4 then
			local negative = false
			odds = pseudorandom(pseudoseed('ceaseless_wheel'))
			if odds < probability/4 then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false
