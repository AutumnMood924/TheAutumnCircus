[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then"
position = "at"
payload = "if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo or self.config.center.shader then"
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local mod_percent = false"
position = "before"
payload = '''if next(poker_hands["Flush"]) then
	local thac_flushfunc
	local thac_suitcounts = {}
	for i=1,#scoring_hand do
		if (not scoring_hand[i].debuff) and scoring_hand[i].ability.effect ~= "Wild Card" and next(TheAutumnCircus.func.get_card_suits(scoring_hand[i], false)) then
			thac_suitcounts[scoring_hand[i].base.suit] = (thac_suitcounts[scoring_hand[i].base.suit] or 0) + 1
		end
	end
	local highest_suit = {"Hearts", 0}
	for _, suit in ipairs(SMODS.Suit.obj_buffer) do
		if thac_suitcounts[suit] then
			if thac_suitcounts[suit] > highest_suit[2] then
				highest_suit = {suit, thac_suitcounts[suit]}
				--print("New highest suit! "..highest_suit[1])
			end
		end
	end
	thac_flushfunc = SMODS.Suits[highest_suit[1]].flush_function
	if thac_flushfunc then
		local effect = thac_flushfunc(scoring_hand)
		G.E_MANAGER:add_event(Event({
			trigger = 'before',
			delay = 2.9,
            func = (function()
                local text = effect.message
                play_sound('gong', 0.94, 0.3)
                play_sound('gong', 0.94*1.5, 0.2)
                play_sound('tarot1', 1.5)
				if text then
					attention_text({
						scale = 1.4, text = text, hold = 1.7, align = 'cm', offset = {x = 0,y = -2.7},major = G.play
					})
				end
				if effect.func then effect.func(scoring_hand) end
				for i=1,#scoring_hand do
					scoring_hand[i]:juice_up()
					delay(0.1)
				end
                return true
            end)
        }))
	end
end'''
match_indent = true
overwrite = false

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
position = "at"
payload = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or blind.name == 'Jera' and k==1 and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
match_indent = true
overwrite = false

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''function create_card(_type, area, legendary, _rarity, skip_materialize, soulable, forced_key, key_append)'''
position = "after"
payload = '''if G.GAME.modifiers.consumables_all_oddities and (_type == "Tarot_Planet" or SMODS.ConsumableTypes[_type] ~= nil) then
_type = "Oddity"
forced_key = nil
end'''
match_indent = true
overwrite = false

# Minor Arcana tooltips
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _c.set == 'Other' then'''
position = "before"
payload = '''
if card and card.base and card.base.suit then
	if card.base.suit == "thac_Cups" then
		info_queue[#info_queue+1] = {key = 'thac_cups_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Wands" then
		info_queue[#info_queue+1] = {key = 'thac_wands_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Coins" then
		info_queue[#info_queue+1] = {key = 'thac_coins_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Swords" then
		info_queue[#info_queue+1] = {key = 'thac_swords_tooltip', set = 'Other'}
	elseif card.base.suit == "thac_Pickaxes" then
		info_queue[#info_queue+1] = {key = 'thac_pickaxes_tooltip', set = 'Other'}
	end
end
'''
match_indent = true
overwrite = false

# Card:set_cost()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "before"
payload = '''
if self.ability.set == "Joker" and self.cost > 0 and self.seal and not G.GAME.used_vouchers.v_thac_stamp_coupon then
    self.extra_cost = self.extra_cost + 2
end
'''
match_indent = true

# Ceaseless Wheel functionality on Wheel of Fortune used_vouchers

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local temp_pool =   (self.ability.name == 'The Wheel of Fortune' and self.eligible_strength_jokers) or"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel then
		local probability = G.GAME.probabilities.normal
		if self.edition and self.edition.negative then
			probability = 1
		end
		local odds = pseudorandom(pseudoseed('ceaseless_wheel_unceasing'))
		if odds < probability/4 then
			local negative = false
			odds = pseudorandom(pseudoseed('ceaseless_wheel'))
			if odds < probability/4 then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval, post = eval_card(self, {selling_self = true})"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel and self.config.center.key == "c_wheel_of_fortune" then
		local probability = G.GAME.probabilities.normal
		if self.edition and self.edition.negative then
			probability = 1
		end
		local odds = pseudorandom(pseudoseed('ceaseless_wheel_unceasing'))
		if odds < probability/4 then
			local negative = false
			odds = pseudorandom(pseudoseed('ceaseless_wheel'))
			if odds < probability/4 then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "inc_career_stat('c_hands_played', 1)"
position = "before"
payload = '''
G.GAME.round_resets.hands_played = (G.GAME.round_resets.hands_played or 0) + 1
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "boss_rerolled = false,"
position = "before"
payload = '''
hands_played = 0,
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
G.FUNCS.draw_from_hand_to_discard()
if G.GAME.blind:get_type() == 'Boss' then
'''
position = "after"
payload = '''
	for i=#G.graveyard,1,-1 do
		if SMODS.has_enhancement(G.graveyard[i], "m_thac_soulbound") then
			G.graveyard[i].ability.perma_mult = G.graveyard[i].ability.perma_mult + 2
			G.graveyard[i]:move_from_graveyard(G.deck)
		end
	end
'''
match_indent = true
overwrite = false


# graveyard (twisted mind) calc
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
--Joker Effects
'''
position = "before"
payload = '''
if next(SMODS.find_card("j_thac_twisted_mind")) then
	delay(0.3)
	local context = {cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands}
	for _, card2 in ipairs(G.graveyard_area.cards) do
		SMODS.score_card(card2, context)
	end
	delay(0.3)
end
'''
match_indent = true
overwrite = false
