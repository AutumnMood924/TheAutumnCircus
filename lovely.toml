[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
position = "at"
payload = '''ability_text[#ability_text + 1] = {n=G.UIT.R, config={align = "cm"}, nodes={{n=G.UIT.T, config={text = (k ==1 and blind.name == 'The Wheel' and '1' or blind.name == 'Jera' and k==1 and '1' or '')..v, scale = 0.35, shadow = true, colour = G.C.WHITE}}}}'''
match_indent = true
overwrite = false

# Need to improve this
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''function create_card(_type, area, legendary, _rarity, skip_materialize, soulable, forced_key, key_append)'''
position = "after"
payload = '''if G.GAME.modifiers.consumables_all_oddities and (_type == "Tarot_Planet" or SMODS.ConsumableTypes[_type] ~= nil) then
_type = "Oddity"
forced_key = nil
end'''
match_indent = true
overwrite = false

# Card:set_cost()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "before"
payload = '''
if self.ability.set == "Joker" and self.cost > 0 and self.seal and not G.GAME.used_vouchers.v_thac_stamp_coupon then
    self.extra_cost = self.extra_cost + 2
end
'''
match_indent = true

# Ceaseless Wheel functionality on Wheel of Fortune used_vouchers

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local temp_pool =   (self.ability.name == 'The Wheel of Fortune' and self.eligible_strength_jokers) or"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel then
		if SMODS.pseudorandom_probability(self, 'ceaseless_wheel', 1, 4) then
			local negative = false
			if SMODS.pseudorandom_probability(self, 'ceaseless_wheel', 1, 4) then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval, post = eval_card(self, {selling_self = true})"
position = "before"
payload = '''
	if G.GAME.ceaseless_wheel and self.config.center.key == "c_wheel_of_fortune" then
		if SMODS.pseudorandom_probability(self, 'ceaseless_wheel', 1, 4) then
			local negative = false
			if SMODS.pseudorandom_probability(self, 'ceaseless_wheel', 1, 4) then
				negative = true
			end
			if negative or #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
				G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.4, func = function()
					play_sound('timpani')
					local card = create_card("Tarot", G.consumeables, nil, nil, nil, nil, "c_wheel_of_fortune", nil)
					if negative then
						card:set_edition({negative = true}, true)
					end
					card:add_to_deck()
					G.consumeables:emplace(card)
					return true
				end}))
			end
		end
	end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "inc_career_stat('c_hands_played', 1)"
position = "before"
payload = '''
G.GAME.round_resets.hands_played = (G.GAME.round_resets.hands_played or 0) + 1
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "boss_rerolled = false,"
position = "before"
payload = '''
hands_played = 0,
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
G.FUNCS.draw_from_hand_to_discard()
if G.GAME.blind:get_type() == 'Boss' then
'''
position = "after"
payload = '''
	for i=#G.graveyard,1,-1 do
		if G.GAME.thac_undying_deck or SMODS.has_enhancement(G.graveyard[i], "m_thac_soulbound") then
			--G.graveyard[i].ability.perma_mult = G.graveyard[i].ability.perma_mult + 2
			G.graveyard[i]:move_from_graveyard(G.deck)
		end
	end
'''
match_indent = true
overwrite = false


# graveyard (twisted mind) calc
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
--Joker Effects
'''
position = "before"
payload = '''
if next(SMODS.find_card("j_thac_twisted_mind")) then
	delay(0.3)
	local context = {cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands}
	for _, card2 in ipairs(G.graveyard_area.cards) do
		SMODS.score_card(card2, context)
	end
	delay(0.3)
end
'''
match_indent = true
overwrite = false

# patch pokermon's silver seal to not work when triggered by twisted mind
# this is both for balance reasons and because it breaks shit lol
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "seals/seals1.lua"]'
pattern = '''
if context.cardarea == G.hand and not context.repetition_only and context.scoring_hand and not card.ability.discarded and check_main_scoring(context.main_scoring) and not card.destroyed then
'''
position = "before"
payload = '''
if card.area ~= G.graveyard_area then
'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "seals/seals1.lua"]'
pattern = '''
  delay(0.3)
end
'''
position = "after"
payload = '''
end
'''
match_indent = true
overwrite = false


# fix smods
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/ui.lua"]'
pattern = '''
local gurso = G.UIDEF.run_setup_option
function G.UIDEF.run_setup_option(_type)
'''
position = "before"
payload = '''
--[[
'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/ui.lua"]'
pattern = '''
                        { n = G.UIT.O, config = { object = Sprite(0, 0, 0.8, 0.8, G.ASSET_ATLAS['mod_tags'], { x = 0, y = 0 }) } },
                    }
                }, 
            }
        })
    end
    return ret
end
'''
position = "after"
payload = '''
--]]
'''
match_indent = true
overwrite = false

# also fix smods
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''
ret_string = ret_string.. (i ~= 1 and " " or "")..line
'''
position = "after"
payload = '''
break
'''
match_indent = true
overwrite = false

# 0-ERROR - Patch in additional PrestigeValues
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "PrestigeValues = {"
position = "after"
payload = '''
	xchips_extra = 0,
	emult_extra = 0,
	echips_extra = 0,
	ascension_extra = 0,
	numerator_extra = 0,
	denominator_extra = 0,
	packopt_extra = 0,
	packsel_extra = 0,
	dollar_eor = 0,
	effect_slots_extra = 0,
	potency_extra = 0,
'''
match_indent = true
overwrite = false

# 0-ERROR - Prestige money payout
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.dollars >= 5 and not G.GAME.modifiers.no_interest then"
position = "before"
payload = '''
if G.GAME.PrestigeValues and G.GAME.PrestigeValues.dollar_eor and G.GAME.PrestigeValues.dollar_eor > 0 then
	add_round_eval_row({dollars = G.GAME.PrestigeValues.dollar_eor, bonus = true, name = "custom", text = localize{type = "variable", key = "prestige_dollar_eor", vars = {G.GAME.PrestigeValues.dollar_eor}}, pitch = pitch})
	pitch = pitch + 0.06
	dollars = dollars + G.GAME.PrestigeValues.dollar_eor
end
'''
match_indent = true
overwrite = false

# ASPECT : Breath effect (count breaths)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.PLANET_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED then
	if self.ability.consumeable.max_highlighted then
'''
position = "after"
payload = '''
local thac_selbreaths = 0
for k,v in ipairs(G.hand.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = false
# ASPECT : Breath effect (noncryptid ver)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.consumeable.mod_num >= #G.hand.highlighted and #G.hand.highlighted >= (self.ability.consumeable.min_highlighted or 1) then"
position = "at"
payload = "if self.ability.consumeable.mod_num >= (#G.hand.highlighted - thac_selbreaths) and #G.hand.highlighted >= (self.ability.consumeable.min_highlighted or 1) then"
match_indent = true
overwrite = true
# ASPECT : Breath effect (cryptid ver)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if (self.ability.consumeable.mod_num - ((G.GAME.modifiers.cry_consumable_reduce and (self.ability.name ~= 'Death')) and (self.ability.consumeable.mod_num > 1) and 1 or 0)) >= #G.hand.highlighted + (self.area == G.hand and -1 or 0) and #G.hand.highlighted + (self.area == G.hand and -1 or 0) >= 1 then"
position = "at"
payload = "if (self.ability.consumeable.mod_num - ((G.GAME.modifiers.cry_consumable_reduce and (self.ability.name ~= 'Death')) and (self.ability.consumeable.mod_num > 1) and 1 or 0)) >= (#G.hand.highlighted - thac_selbreaths) + (self.area == G.hand and -1 or 0) and #G.hand.highlighted + (self.area == G.hand and -1 or 0) >= (self.ability.consumeable.min_highlighted or 1) then"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 2 (count breaths)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''
function CardArea:add_to_highlighted(card, silent)
'''
position = "after"
payload = '''
local thac_selbreaths = card.aspect == "thac_breath" and 1 or 0
for k,v in ipairs(self.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = false
# ASPECT : Breath effect pt 2 (noncryptid ver)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if #self.highlighted >= self.config.highlighted_limit then"
position = "at"
payload = "if #self.highlighted - thac_selbreaths >= self.config.highlighted_limit then"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 2 (cryptid ver)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if to_big(#self.highlighted) >= to_big(self.config.highlighted_limit) then"
position = "at"
payload = "if to_big(#self.highlighted - thac_selbreaths) >= to_big(self.config.highlighted_limit) then"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 3 (count breaths cryptid)
[[patches]]
[patches.pattern]
target = '=[SMODS Cryptid "lib/overrides.lua"]'
pattern = '''
G.FUNCS.can_play = function(e)
'''
position = "after"
payload = '''
local thac_selbreaths = 0
for k,v in ipairs(G.hand.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = false
# ASPECT : Breath effect pt 3 (count breaths noncryptid)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.FUNCS.can_play = function(e)
'''
position = "after"
payload = '''
local thac_selbreaths = 0
for k,v in ipairs(G.hand.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = false
# ASPECT : Breath effect pt 3 (cryptid ver)
[[patches]]
[patches.pattern]
target = '=[SMODS Cryptid "lib/overrides.lua"]'
pattern = "or #G.hand.highlighted > math.max(G.GAME.starting_params.play_limit, 1)"
position = "at"
payload = "or (#G.hand.highlighted - thac_selbreaths) > math.max(G.GAME.starting_params.play_limit, 1)"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 3 (noncryptid ver)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > math.max(G.GAME.starting_params.play_limit, 1) then "
position = "at"
payload = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or (#G.hand.highlighted - thac_selbreaths) > math.max(G.GAME.starting_params.play_limit, 1) then"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 4 (count breaths cryptid)
[[patches]]
[patches.pattern]
target = '=[SMODS Cryptid "lib/overrides.lua"]'
pattern = '''
G.FUNCS.can_discard = function(e)
'''
position = "after"
payload = '''
local thac_selbreaths = 0
for k,v in ipairs(G.hand.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 4 (count breaths noncryptid)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.FUNCS.can_discard = function(e)
'''
position = "after"
payload = '''
local thac_selbreaths = 0
for k,v in ipairs(G.hand.highlighted) do
	if v.aspect == "thac_breath" then thac_selbreaths = thac_selbreaths + 1 end
end
'''
match_indent = true
overwrite = false
# ASPECT : Breath effect pt 4 (cryptid ver)
[[patches]]
[patches.pattern]
target = '=[SMODS Cryptid "lib/overrides.lua"]'
pattern = "or #G.hand.highlighted > math.max(G.GAME.starting_params.discard_limit, 0)"
position = "at"
payload = "or (#G.hand.highlighted - thac_selbreaths) > math.max(G.GAME.starting_params.discard_limit, 0)"
match_indent = true
overwrite = true
# ASPECT : Breath effect pt 4 (noncryptid ver)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.GAME.current_round.discards_left <= 0 or #G.hand.highlighted <= 0 or #G.hand.highlighted > math.max(G.GAME.starting_params.discard_limit, 0) then "
position = "at"
payload = "if G.GAME.current_round.discards_left <= 0 or #G.hand.highlighted <= 0 or (#G.hand.highlighted - thac_selbreaths) > math.max(G.GAME.starting_params.discard_limit, 0) then"
match_indent = true
overwrite = true